Install-Package Microsoft.EntityFrameworkCore.SqlServer 
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Swashbuckle.AspNetCore
Install-Package Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore





Data Source=DESKTOP-3833V1F;Initial Catalog=training;Integrated Security=True







using Microsoft.EntityFrameworkCore;
using System.ComponentModel.DataAnnotations;


namespace WebApplication4.Models
{
    public class Product
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }
        public int Price { get; set; }
        public string JsonData { get; set; }
        public bool IsDeleted { get; set; } // For soft delete filter
    }

}






using Microsoft.EntityFrameworkCore;

namespace WebApplication4.Models
{
    public class AppDbContext : DbContext
    {
        public DbSet<Product> Products { get; set; }
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }
        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    optionsBuilder.UseSqlServer("Data Source=DESKTOP-3833V1F;Initial Catalog=training;Integrated Security=True;TrustServerCertificate=True");
        //}
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Product>()
                .HasQueryFilter(p => !p.IsDeleted);
            //modelBuilder.Entity<Product>()
            //    .Property(p => p.JsonData)
            //    .HasColumnType("json");
        }
    }
}





Program.cs
using Microsoft.EntityFrameworkCore;
using WebApplication4.Models;
using System;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

builder.Services.AddDbContext<AppDbContext>(options =>
               options.UseSqlServer(builder.Configuration.GetConnectionString("SqlServerConnection")));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();


var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();






{

  "ConnectionStrings": {
    "SqlServerConnection": "Data Source=DESKTOP-3833V1F;Initial Catalog=training;Integrated Security=True;TrustServerCertificate=True"
  },

  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}






using Microsoft.EntityFrameworkCore;

namespace WebApplication4.Models
{
    public class ProductService
    {
        private readonly AppDbContext _context;
        public ProductService(AppDbContext context) { _context = context; }
        // Bulk Updates and Deletes.     // EF Core 8 provides more efficient bulk operations.Hereâ€™s an example of how to perform bulk updates:
        public async Task BulkUpdatePricesAsync()
        {
            var products = _context.Products.Where(p => p.Price < 10);
            await products.ExecuteUpdateAsync(p => p.SetProperty(p => p.Price, p => p.Price + 1));
        }
        public async Task BulkDeleteProductsAsync()
        {   // And for bulk deletes
            var products = _context.Products.Where(p => p.Price < 10);
            await products.ExecuteDeleteAsync();
        }
        // Improved LINQ Translations. // EF Core 8 improves the translation of complex LINQ queries to SQL, making it easier to write and maintain complex queries.
        public async Task<List<Product>> GetProductsAsync()
        {
            var products = await _context.Products
                .Where(p => p.Name.Contains("Ebook")).OrderBy(p => p.Price).ToListAsync();
            return products;
        }
    }
}





Home->Index.cshtml

Add before the last </div>
<p>click to go to <a href="/Products">Products</a> Index page</p>




Build Application 
Then Go to:
Tools-> NuGet Package Manager->Package Manager Console



Add migration tools with the name InitialCreate 
This is going to add a folder named Migration in the Project with InitialCreate.cs file

Add-Migration InitialCreate


Then type :
Update-Database

This command is responsible to create database table in SQL server










