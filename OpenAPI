Create a new Project in VS 2022 with template: ASP.NET Core Web API
Add OpenAPI : Microsoft.AspNetCore.OpenApi from NuGet packages
For Minimal API, we need to configure services and middleware to support Minimal APIs. So Edit Program.cs
Run the Application in IIS Express





var builder = WebApplication.CreateBuilder(args);

builder.Services.AddEndpointsApiExplorer();// Add services to the container.

builder.Services.AddSwaggerGen();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{  // Configure the HTTP request pipeline.
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseHttpsRedirection();

app.MapGet("/", () => "Hello World!");

app.MapGet("/products/{id}", (int id) =>
{ 
    return Results.Ok(new { 
        Id = id, Name = "Sample Product", Price = 100 
    }); 
})
.WithName("GetProduct")
.WithOpenApi(); // Generates OpenAPI documentation

app.MapPost("/products", (Product product) => // Process the product
{ 
    return Results.Created($"/products/{product.Id}", product); 
})
.WithName("CreateProduct")
.WithOpenApi(); // Generates OpenAPI documentation

app.MapPut("/products/{id}", (int id, Product updatedProduct) => // Update the product with the given ID
{ 
    return Results.NoContent(); 
})
.WithName("UpdateProduct")
.WithOpenApi(); // Generates OpenAPI documentation

app.MapDelete("/products/{id}", (int id) =>   // Delete the product with the given ID
{ 
    return Results.NoContent(); 
})
.WithName("DeleteProduct")
.WithOpenApi(); // Generates OpenAPI documentation



app.Run();
record Product(int Id, string Name, decimal Price);







CRUD:

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// In-memory product store
var products = new List<Product>
{
    new Product(1, "Product 1", 100.00M),
    new Product(2, "Product 2", 200.00M),
    new Product(3, "Product 3", 300.00M)
};

// Get all products
app.MapGet("/products", () =>
{
    return Results.Ok(products);
})
.WithName("GetAllProducts")
.WithOpenApi();

// Get product by ID
app.MapGet("/products/{id}", (int id) =>
{
    var product = products.FirstOrDefault(p => p.Id == id);
    if (product is null)
    {
        return Results.NotFound();
    }
    return Results.Ok(product);
})
.WithName("GetProductById")
.WithOpenApi();

// Create a new product
app.MapPost("/products", (Product product) =>
{
    products.Add(product);
    return Results.Created($"/products/{product.Id}", product);
})
.WithName("CreateProduct")
.WithOpenApi();

// Update an existing product
app.MapPut("/products/{id}", (int id, Product updatedProduct) =>
{
    var product = products.FirstOrDefault(p => p.Id == id);
    if (product is null)
    {
        return Results.NotFound();
    }
    else
    {
        product = new Product(id,updatedProduct.Name,updatedProduct.Price);
    }

    return Results.NoContent();
})
.WithName("UpdateProduct")
.WithOpenApi();

// Delete a product
app.MapDelete("/products/{id}", (int id) =>
{
    var product = products.FirstOrDefault(p => p.Id == id);
    if (product is null)
    {
        return Results.NotFound();
    }

    products.Remove(product);
    return Results.NoContent();
})
.WithName("DeleteProduct")
.WithOpenApi();

app.Run();

public record Product(int Id, string Name, decimal Price);











