using System;
public class Employee(string firstName, string lastName, DateTime hireDate, decimal salary) 
{
    public string FirstName { get; init; } = firstName;
    public string LastName { get; init; } = lastName;
    public DateTime HireDate { get; init; } = hireDate;
    public decimal Salary { get; init; } = salary;
public override string? ToString() {
        return "\nFirstName: " + FirstName + " LastName: " + LastName + " HireDate: " + HireDate + " Salary: " + Salary;
    }
}
class Program {
    static void Main(string[] args)     {
        var employee = new Employee("John", "Doe", new DateTime(2024, 1, 1), 50000);
        Console.WriteLine(employee);
    }
}













using System;
namespace ConApp1222 {
    public struct Point(int x, int y)     {
        public int X { get; } = x;
        public int Y { get; } = y;
        //Deconstruction: The Deconstruct method allows the struct to be deconstructed into its components.
        public void Deconstruct(out int x, out int y)
        {   x = X;   y = Y;    }
        public override string ToString() => $"Point({X}, {Y})";
    }
    class Program   {
        static void Main(string[] args)        {
            // Create a Point instance using the primary constructor
            Point point = new Point(3, 4);
            // Access properties
            Console.WriteLine($"X: {point.X}, Y: {point.Y}");
            // Deconstruct the point
            var (x, y) = point;
            Console.WriteLine($"Deconstructed: X = {x}, Y = {y}");
            // Use the ToString method
            Console.WriteLine(point);
        }
    }
}

