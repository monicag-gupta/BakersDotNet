Create a folder MyComp in Components folder
Add a new Razor Component in the folder MyComp. Name it BtnComp.razor

Edit Home.razor to add BtnComp component.
We see that the output does not render the button click
Now add @rendermode="InteractiveServer" to the BtnComp
We can see that the button is interacting
Next we can give the component page wise rendermode also by adding @rendermode="InteractiveServer" at BtnComp page rather than the Home page/ BtnComp component.



BtnComp.razor:

<h3>BtnComp</h3>

<button @onclick="changeMsg">Click to see Message</button>
<h2>@msg</h2>

@code {
    string msg="Old messages";
    void changeMsg(){
        msg = msg == "Old messages" ? "This is the new Message post click":"Old messages";
    }

}





Home.razor:

@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<BtnComp @rendermode="InteractiveServer"/>







Create classes:
Models->Product.cs
Services->ProductService.cs


Create Razor Component in Pages folder:
ProductForm.razor
ProductList.razor




namespace BlazorApp1.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }

}





using BlazorApp1.Models;

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace BlazorApp1.Services
{
    public class ProductService
    {
        private List<Product> _products = new List<Product>
        {
            new Product { Id = 1, Name = "Product 1", Price = 10.0M },
            new Product { Id = 2, Name = "Product 2", Price = 20.0M }
        };

        public Task<List<Product>> GetProductsAsync()
        {
            return Task.FromResult(_products);
        }

        public Task<Product> GetProductByIdAsync(int id)
        {
            return Task.FromResult(_products.FirstOrDefault(p => p.Id == id));
        }

        public Task AddProductAsync(Product product)
        {
            _products.Add(product);
            return Task.CompletedTask;
        }

        public Task UpdateProductAsync(Product product)
        {
            var existingProduct = _products.FirstOrDefault(p => p.Id == product.Id);
            if (existingProduct != null)
            {
                existingProduct.Name = product.Name;
                existingProduct.Price = product.Price;
            }
            return Task.CompletedTask;
        }

        public Task DeleteProductAsync(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product != null)
            {
                _products.Remove(product);
            }
            return Task.CompletedTask;
        }
    }
}





Add to Program.cs:

builder.Services.AddScoped<ProductService>();




In NavMenu.razor, add:
<div class="nav-item px-3">
    <NavLink class="nav-link" href="products">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Products
    </NavLink>
</div>








@page "/products"
@inject ProductService ProductService
@inject NavigationManager NavigationManager

<h3>Product List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Price</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditProduct(product.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="CreateProduct">Create New Product</button>

@code {
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private void CreateProduct()
    {
        // Navigate to create page
        NavigationManager.NavigateTo("/create-product");
    }

    private void EditProduct(int id)
    {
        // Navigate to edit page
        NavigationManager.NavigateTo($"/edit-product/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProductAsync(id);
        products = await ProductService.GetProductsAsync();
    }
}











@page "/create-product"
@page "/edit-product/{id:int}"
@inject ProductService ProductService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>@(IsEdit ? "Edit Product" : "Create Product")</h3>

<EditForm Model="product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Id</label>
        <InputNumber class="form-control" @bind-Value="product.Id" />
    </div>

    <div class="form-group">
        <label>Name</label>
        <InputText class="form-control" @bind-Value="product.Name" />
    </div>

    <div class="form-group">
        <label>Price</label>
        <InputNumber class="form-control" @bind-Value="product.Price" />
    </div>

    <button type="submit" class="btn btn-primary">@ButtonText</button>
</EditForm>

@code {
    [Parameter] public int? id { get; set; }
    private Product product = new Product();
    private bool IsEdit => id.HasValue;
    private string ButtonText => IsEdit ? "Update" : "Create";

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            product = await ProductService.GetProductByIdAsync(id.Value);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (IsEdit)
        {
            await ProductService.UpdateProductAsync(product);
        }
        else
        {
            await ProductService.AddProductAsync(product);
        }

        NavigationManager.NavigateTo("/products");
    }
}



